// This is super handy
// https://github.com/spring-projects/gradle-plugins/tree/master/propdeps-plugin

buildscript {
    repositories {
        maven { url 'https://repo.spring.io/plugins-release' }
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7',
                //https://github.com/johnrengelman/shadow
                'com.github.jengelman.gradle.plugins:shadow:1.1.1',
                //https://github.com/Khoulaiz/gradle-jetty-eclipse-plugin -- Because the gradle jetty is super old
                'com.sahlbach.gradle:gradle-jetty-eclipse-plugin:1.9+'
    }
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
}

allprojects {
  apply plugin: 'idea'

    configurations.all {
        //For all configurations, if something wants commons-logging GTFO it with slf4j's bridge
        resolutionStrategy.eachDependency {
            if(it.requested.name == 'commons-logging') {
                it.useTarget 'org.slf4j:jcl-over-slf4j:1.7.7'
            }
        }
    }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'scala'
  group = 'org.openrepose.prototype'
  version = '1.NOPE'

  repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://repo.spring.io/release" }
  }

  dependencies {
    compile "org.scala-lang:scala-library:2.10.4",
            'org.slf4j:slf4j-api:1.7.7',
            //I can use the scala logging API directly I think
            'com.typesafe.scala-logging:scala-logging-slf4j_2.10:2.1.2'
  }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }

    task 'create-dirs' << {
        sourceSets.all { set ->
            set.allSource.srcDirs.each {it.mkdirs()}
        }
    }

}

//Core IMPL depends on the API
project(':core') {
  //CORE assumes it'll have a servlet api in there somewhere, mostly for the filters.
  dependencies {
    compile "org.springframework:spring-context:4.1.0.RELEASE",
            "org.springframework:spring-web:4.1.0.RELEASE",
            "org.apache.logging.log4j:log4j-core:2.0.2",
            "org.apache.logging.log4j:log4j-slf4j-impl:2.0.2"
    provided 'javax.servlet:javax.servlet-api:3.1.0'
  }
}
import org.apache.tools.ant.filters.ReplaceTokens

project(':valve') {
    apply plugin: "application"
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        warArtifact
    }

    mainClassName = "org.protorepose.valve.Main"
    dependencies {
        compile "org.springframework:spring-web:4.1.0.RELEASE",
                "org.eclipse.jetty:jetty-server:${jettyVersion}",
                "org.eclipse.jetty:jetty-webapp:${jettyVersion}",
                "org.eclipse.jetty:jetty-annotations:${jettyVersion}",
                "org.eclipse.jetty:jetty-plus:${jettyVersion}",
                'javax.servlet:javax.servlet-api:3.1.0',
                "org.apache.logging.log4j:log4j-core:2.0.2",
                "org.apache.logging.log4j:log4j-slf4j-impl:2.0.2",
                'com.typesafe:config:1.2.1'
                //Hard depend on core, if we're going to use the servlet directly
                //project(":core")
        // http://forums.gradle.org/gradle/topics/problem_with_the_ear_plugin#reply_7176985
        warArtifact project(path: ":war", configuration: "archives")
    }

    /**
     * This copies the warArtifact dependency configuration into the build directory
     */
    task copyWarFile(type: Copy) {
        into "$buildDir"
        from configurations.warArtifact
    }

    build.dependsOn(copyWarFile)

    processResources {
        filter ReplaceTokens, tokens: [
                "warLocation": project.property("buildDir").getAbsolutePath(),
                "version": project.property("version"),
                "jettyVersion": project.property("jettyVersion")
        ]
    }
}

project(':war') {
  apply plugin: 'war'
  apply plugin: 'jettyEclipse'

    dependencies {
        //See: http://logging.apache.org/log4j/2.x/maven-artifacts.html under "Web Servlet Support"
        // This *might* also matter: http://logging.apache.org/log4j/2.x/manual/webapp.html
        compile project(':core'), "org.apache.logging.log4j:log4j-web:2.0.2", "org.springframework:spring-web:4.1.0.RELEASE"
        provided 'javax.servlet:javax.servlet-api:3.1.0'
    }
}
